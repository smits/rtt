#ifndef ORO_CORBA_OPERATION_REPOSITORY_IDL
#define ORO_CORBA_OPERATION_REPOSITORY_IDL

#ifdef CORBA_IS_TAO
//resolves LNK2005
#include <tao/orb.idl>
#endif

module RTT
{
  module corba
  {
      typedef sequence<any> CAnyArguments;

    /**
     * When querying an operation for
     * the kinds of arguments it takes, this
     * structure is returned for each argument.
     */
    struct CArgumentDescription
    {
      string name;        //! Argument name
      string description; //! Argument description
      string type;        //! Qualified type
    };

    typedef sequence<CArgumentDescription> CDescriptions;
    
    /**
     * Is thrown when a wrong argument number is queried.
     */
    exception CWrongArgumentException
    {
      long which_arg;
      long max_arg;
    };

    /**
     * Is thrown when a wrong number of arguments is provided.
     */
    exception CWrongNumbArgException
    {
      long wanted;
      long received;
    };

    /**
     * Is thrown when a wrong type of arguments is provided.
     */
    exception CWrongTypeArgException
    {
      long whicharg;
      string expected;
      string received;
    };

    /**
     * Is thrown when an operation does not exist.
     */
    exception CNoSuchNameException
    {
      string name;
    };
    
    enum CSendStatus { CCollectFailure, CSendFailure, CSendNotReady, CSendSuccess };

    /**
     * Is thrown if the calling or sending of an operation was
     * interrupted.
     */    
    exception CCallInterrupted
    {
    };

    exception CCallError
    {
      string what;
    };
    
    /**
     * A handler object that allows us to collect the results
     * of a send. Due to memory restrictions, a server may choose
     * to cleanup a CSendHandle before or during collect() was called.
     * This is equivalent to having a SendError.
     */
    interface CSendHandle {
    
        CSendStatus collect(out CAnyArguments args) raises(CCallError);

        CSendStatus collectIfDone(out CAnyArguments args) raises(CCallError);
        
        /**
         * Just checks what the status is.
         */              
        CSendStatus checkStatus();
        /**
         * Returns only the return value, when checkStatus() returns CSendSuccess.
         * Convenient if the sent method only returns a value.
         */  
        any ret() raises(CCallError);                       

      /**
       * Checks if this handle returns these arguments in collect() and collectIfDone().
       * You can use this to check if collect() or collectIfDone() return what you expect.
       * If no exception is thrown, the arguments are of the correct number
       * and type. The values in \a args are ignored and not stored, only the types of the anys are checked.
       * One could obtain the same information by using COperationInterface::getCollectType()
       * for 1..COperationInterface::getCollectArity().
       */
      void checkArguments(in CAnyArguments args) raises (
                                 CWrongNumbArgException,
                                 CWrongTypeArgException);

      /**
       * Clients need to call this after they have finished using this
       * CSendHandle object. After dispose(), this object may no longer
       * be used.
       */
      void dispose();
    };

    /**
     * Exposes the operations this service offers.
     * @ingroup CompIDL
     */
    interface COperationInterface
    {
	typedef sequence<string> COperationList;

      /**
       * Get a list of all operations.
       */
      COperationList getOperations();

      /**
       * Get a list of all arguments of a given operation.
       */
      CDescriptions getArguments(in string operation) raises (CNoSuchNameException);

      /**
       * Returns the number of arguments required in callOperation() and sendOperation() for
       * a given operation.
       */
      unsigned short getArity(in string operation) raises (CNoSuchNameException);

      /**
       * Returns the number of arguments required in CSendHandle::collect() and CSendHandle::collectIfDone() for
       * a given operation.
       */
      unsigned short getCollectArity(in string operation) raises (CNoSuchNameException);

      /**
       * Get a result type of a given operation.
       */
      string getResultType(in string operation) raises (CNoSuchNameException);
      
      /**
       * Returns the argument or return type name of call as known to the Orocos type system.
       */
      string getArgumentType(in string operation, in unsigned short nbr) raises (CNoSuchNameException, CWrongArgumentException);
      
      /**
       * Returns the argument type  of collect as known to the Orocos type system.
       */
      string getCollectType(in string operation, in unsigned short nbr) raises (CNoSuchNameException, CWrongArgumentException);

      /**
       * Get a description of a given operation.
       */
      string getDescription(in string operation) raises (CNoSuchNameException);

      /**
       * Checks if a given operation accepts the list of arguments.
       * If no exception is thrown, the arguments and operation name were valid.
       */
      void checkOperation(in string operation, in CAnyArguments args) raises ( CNoSuchNameException,
                                 CWrongNumbArgException,
                                 CWrongTypeArgException);

      /**
       * Call an operation with a list of arguments.
       * This method will block until the operation completes and returns its result.
       */
      any callOperation(in string operation, inout CAnyArguments args) raises ( CNoSuchNameException,
								 CWrongNumbArgException,
								 CWrongTypeArgException,
                                 CCallInterrupted,
                                 CCallError);

      /**
       * Send an operation with a list of arguments.
       * This method will return immediately and return a CSendHandle.
       */
      CSendHandle sendOperation(in string operation, in CAnyArguments args) raises ( CNoSuchNameException,
                                 CWrongNumbArgException,
                                 CWrongTypeArgException,
                                 CCallInterrupted);
    };

  };
};
#endif
