#ifndef ORO_CORBA_SERVICE_REQUESTER_IDL
#define ORO_CORBA_SERVICE_REQUESTER_IDL

#ifdef CORBA_IS_TAO
//resolves LNK2005
#include <tao/orb.idl>
#endif
#include "Service.idl"

module RTT
{
    module corba
    {

	typedef sequence<string> CRequestNames;
	typedef sequence<string> COperationCallerNames;

    interface CServiceRequester;
    struct CServiceRequesterDescription;
    typedef sequence<CServiceRequesterDescription> CServiceRequesterDescriptions;

    /**
     * Complete description of a ServiceRequester
     * @ingroup CompIDL
     */
    struct CServiceRequesterDescription
    {
        string name;
        COperationCallerNames operationcallernames;

        sequence<CServiceRequester> children;
        CServiceRequesterDescriptions children_descriptions;
    };

	/**
	 * An Orocos Required Service.
	 * Exposes that this component requires certain services.
	 * @ingroup CompIDL
	 */
	interface CServiceRequester
	{
	    /**
         * Return the name of this requester.
	     */
	    string getRequestName();

        /**
         * Return the full description of this requester
         * that includes all ServiceRequester objects
         */
        CServiceRequesterDescription getCServiceRequesterDescription();

	    /**
	     * Get a list of all the child requests this request offers.
	     */
	    CRequestNames getRequestNames( );

	    /**
	     * Returns the methods required by this requester.
	     */
	    COperationCallerNames getOperationCallerNames();

	    /**
	     * Get a child request this request provides.
	     */
	    CServiceRequester getRequest( in string name );

	    /**
	     * Has this request a child request with given name ?
	     */
	    boolean hasRequest( in string name );

        /**
         * Connects the whole interface to a remote service.
         */
	    boolean connectTo( in CService svc);
	    
	    /**
	     * Connets a single operation caller from this interface to
	     * one with the same name in a remote service.
	     */
	    boolean connectCallerTo( in string name, in CService svc);

        /**
         * Returns true if all operation callers are connected to
         * the operations of a service.
         */
	    boolean ready();
	    
	    /**
	     * Disconnects a caller.
	     * @return false if name dit not exist.
	     */
	    boolean disconnectCaller( in string name );
	    
        /**
         * Checks if a caller is ready.
         * @return false if name dit not exist or not ready.
         */
	    boolean callerReady( in string name );

        /**
         * Disconnects all operation callers.
         */
	    void disconnect();
	};

    };
};
#endif
